#include<bits/stdc++.h>

using namespace std;

typedef long long ll;


// 0 based indexing in rand insertion, deletation and searching
struct node {
    int data;
    struct node *next;
};


struct node *head = NULL;


void begin_insert(int x)
{

    struct node *ptr;

    ptr=(struct node*) malloc(sizeof(struct node*));

    if (ptr==NULL)
    {
        cout<<"Overflow\n";
    }

    else
    {
        ptr->data = x;
        ptr->next = head;
        head = ptr;

    }

}

void rand_insert(int x,int loc)
{
    struct node *ptr,*temp;

    ptr=(struct node*) (malloc(sizeof (struct node*)));

    if (ptr==NULL)
    {
        cout<<"Overflow\n";
    }
    else
    {
        ptr->data = x;
        temp=head;


        for (int i=0;i<loc-1;i++)
        {
            temp=temp->next;

            if (temp==NULL)
            {
                cout<<"Can't insert\n";
                break;
            }
        }

        ptr->next = temp->next;
        temp->next = ptr;


    }
}


void last_insert(int x)
{
    struct node *ptr,*temp;

    ptr=(struct node*)(malloc(sizeof (struct node*)));

    if (ptr==NULL)
    {
        cout<<"Overflow\n";
    }

    else
    {
        ptr->data = x;

        if (head==NULL)
        {
            ptr->next = NULL;
            head = ptr;
        }

        else
        {
            temp = head;
            while(temp->next!=NULL)
            {
                temp = temp->next;
            }

            temp->next = ptr;
            ptr->next = NULL;
        }
    }
}


void begin_delete()
{
    struct node* ptr;

    ptr = head;

    head = head->next;
    free(ptr);
}


void rand_delete(int loc)
{
	struct node *ptr,*ptr1;

	ptr=head;
	for (int i=0;i<loc;i++)
	{

		ptr1=ptr;
		ptr=ptr->next;
	

		if (ptr==NULL)
		{
			cout<<"Can't delete\n";
		}
	}

	ptr1->next = ptr->next;

	free(ptr);


}

void last_delete()
{
    struct node* ptr,*temp,*temp2;
     temp=head;

    if (head == NULL)
    {
        cout<<"This is empty\n";
        return ;
    }
     else if (temp->next == NULL)
     {
        
         head=NULL;
         free(temp);

         return ;
     }
   
    while (temp->next !=NULL)
    {
        temp2=temp;
        temp=temp->next;
    }

    free(temp);
    temp2->next=NULL;




}


void search (int x)
{
	struct node* ptr;

	int i=0;
	
	ptr = head;
	if (ptr==NULL)
	{
		cout<<"Empty List\n";
	}

	else
	{
		while(ptr!=NULL)
		{
			if (ptr->data == x)
			{
				cout<<"Element found at location "<<i+1<<endl;
				return;
			}

			i++;
			ptr = ptr->next;
		}

	}

	cout<<"Element not found\n";

	return ;


}
void display ()
{
    struct node* ptr;
   

    if (head==NULL)
    {
        cout<<"Empty List\n";
        return;
    }
     ptr = head;
    while (ptr->next!=NULL)
    {
        cout<<ptr->data<<" ";
        ptr=ptr->next;
    }
    cout<<ptr->data<<endl;
}
int main ()
{
     int n;
    cin>>n;
    while (n--)
    {
        int x;
        cin>>x;
        last_insert(x);
    }

    rand_insert(100,5);

    display();
    
   // rand_delete(5);
    display();
    search(100);

}
